# WHY?
# If this is first boot, this file will not exist.
# We will want to reboot after writing this file, as it guarantees the wifi
# adapter mapping. So, we check, run our code, and at the end of this set of
# plays, we reboot if the file was *not* present.
- name: find out if the rules exist already (is this first boot?)
  ansible.builtin.stat:
    path: "{{ persistent_rules }}"
  register: rules_file

- name: install wifi-hardware-search-cli tool binary
  ansible.builtin.get_url:
    url: "{{ wifi_hardware_search.binary_url }}"
    dest: "{{ install_path }}"
    owner: root
    group: root
    mode: 0755
  become: yes

# exists bool
# physical id    int
# description   string
# bus info       string
# logical name   string
# serial        string
# mac           string
# configuration string

# We must "become" for the wifi-hardware-search-cli tool.
# It will not find USB devices as non-root.
# Normally, if no device is found, there is a non-zero error.
# However, if we're asking nicely to find out if one exists,
# we will get "true" or "false", and a 0 error code always.
# (Short of catestrophic errors/failures.)
- name: do we find an ralink adapter?
  ansible.builtin.command:
    cmd: "{{ install_path }}/wifi-hardware-search-cli --discover --exists"
  register: ralink_exists
  become: yes

# - name: what is going on
#   ansible.builtin.debug:
#     msg: "{{ ralink_exists }}"

# - name: what is going on also
#   ansible.builtin.debug:
#     msg: "{{ ralink_exists.stdout }}"

- name: get the mac address if it exists
  ansible.builtin.command:
    cmd: "{{ install_path }}/wifi-hardware-search-cli --discover --extract mac"
  register: ralink_mac
  become: yes
  when: "'true' in ralink_exists.stdout"

- name: get the logical name of the adapter if it exists
  ansible.builtin.command:
    cmd: "{{ install_path }}/wifi-hardware-search-cli --discover --extract logicalname"
  register: ralink_logicalname
  become: yes
  when: "'true' in ralink_exists.stdout"

# If we find an adapter, then we can proceed to update
# some global config files.
- name: write wlan1 into udev rules
  ansible.builtin.lineinfile:
    path: "{{ persistent_rules }}"
    regexp: "{{ ralink_mac.stdout }}"
    state: present
    line: 'SUBSYSTEM=="net", ACTION=="add", ATTR{address}=="{{ ralink_mac.stdout }}", NAME="{{ ralink_logicalname.stdout }}"'
    create: true
  become: yes
  when: "'true' in ralink_exists.stdout"

###############
# WARNING
# This may, or may not, work for older RPis. We know this works for:
#
#   * Raspberry Pi 4B
#   * Raspberry Pi 3B
#
# In short, it has to be a device that uses the brc driver, and we need to know that there
# isn't more than one device that does this. We may want to improve the search field, or
# ideally, test on more hardware. For the pilot, though, we constrained to the 4B.
- name: do we find the default broadcom adapter?
  ansible.builtin.command:
    cmd: "{{ install_path }}/wifi-hardware-search-cli --search brc --field configuration --exists"
  register: brc_exists
  become: yes

- name: get the mac address of the broadcom adapter if it exists
  ansible.builtin.command:
    cmd: "{{ install_path }}/wifi-hardware-search-cli --search brc --field configuration --extract mac"
  register: brc_mac
  become: yes
  when: "'true' in brc_exists.stdout"

- name: get the logical name of the broadcom adapter if it exists
  ansible.builtin.command:
    cmd: "{{ install_path }}/wifi-hardware-search-cli --search brc --field configuration --extract logicalname"
  register: brc_logicalname
  become: yes
  when: "'true' in brc_exists.stdout"

- name: write the built-in wifi into udev rules
  ansible.builtin.lineinfile:
    path: "{{ persistent_rules }}"
    regexp: "{{ brc_mac.stdout }}"
    state: present
    line: 'SUBSYSTEM=="net", ACTION=="add", ATTR{address}=="{{ brc_mac.stdout }}", NAME="{{ brc_logicalname.stdout }}"'
    create: yes
  become: yes
  when: "'true' in brc_exists.stdout"

## Reload the rules
# Regardless of whether anything changed, reload the rules.
# It is a two-step process.
# https://unix.stackexchange.com/questions/39370/how-to-reload-udev-rules-without-reboot/39371
- name: reload the rules
  ansible.builtin.command:
    cmd: udevadm control --reload-rules
  become: yes

- name: trigger the... newly reloaded rules...
  ansible.builtin.command:
    cmd: udevadm trigger
  become: yes

# Take the USB wifi interface down, set it in monitor mode, and
# then bring it back up.
- name: take down USB wifi
  ansible.builtin.command:
    cmd: "ip link set {{ ralink_logicalname.stdout }} down"
  become: yes
  when: "'true' in ralink_exists.stdout"

- name: set USB wifi into monitor mode
  ansible.builtin.command:
    cmd: "iw {{ ralink_logicalname.stdout }} set monitor none"
  become: yes
  when: "'true' in ralink_exists.stdout"

- name: bring up down USB wifi
  ansible.builtin.command:
    cmd: "ip link set {{ ralink_logicalname.stdout }} up"
  become: yes
  when: "'true' in ralink_exists.stdout"
