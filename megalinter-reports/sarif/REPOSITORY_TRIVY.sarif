{
  "version": "2.1.0",
  "$schema": "https://json.schemastore.org/sarif-2.1.0-rtm.5.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "fullName": "Trivy Vulnerability Scanner",
          "informationUri": "https://github.com/aquasecurity/trivy",
          "name": "Trivy",
          "rules": [
            {
              "id": "CVE-2022-24434",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-24434"
              },
              "fullDescription": {
                "text": "This affects all versions of package dicer. A malicious attacker can send a modified form to server, and crash the nodejs service. An attacker could sent the payload again and again so that the service continuously crashes."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2022-24434",
              "help": {
                "text": "Vulnerability CVE-2022-24434\nSeverity: HIGH\nPackage: dicer\nFixed Version: \nLink: [CVE-2022-24434](https://avd.aquasec.com/nvd/cve-2022-24434)\nThis affects all versions of package dicer. A malicious attacker can send a modified form to server, and crash the nodejs service. An attacker could sent the payload again and again so that the service continuously crashes.",
                "markdown": "**Vulnerability CVE-2022-24434**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|dicer||[CVE-2022-24434](https://avd.aquasec.com/nvd/cve-2022-24434)|\n\nThis affects all versions of package dicer. A malicious attacker can send a modified form to server, and crash the nodejs service. An attacker could sent the payload again and again so that the service continuously crashes."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-31129",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-31129"
              },
              "fullDescription": {
                "text": "moment is a JavaScript date library for parsing, validating, manipulating, and formatting dates. Affected versions of moment were found to use an inefficient parsing algorithm. Specifically using string-to-date parsing in moment (more specifically rfc2822 parsing, which is tried by default) has quadratic (N^2) complexity on specific inputs. Users may notice a noticeable slowdown is observed with inputs above 10k characters. Users who pass user-provided strings without sanity length checks to moment constructor are vulnerable to (Re)DoS attacks. The problem is patched in 2.29.4, the patch can be applied to all affected versions with minimal tweaking. Users are advised to upgrade. Users unable to upgrade should consider limiting date lengths accepted from user input."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2022-31129",
              "help": {
                "text": "Vulnerability CVE-2022-31129\nSeverity: HIGH\nPackage: moment\nFixed Version: 2.29.4\nLink: [CVE-2022-31129](https://avd.aquasec.com/nvd/cve-2022-31129)\nmoment is a JavaScript date library for parsing, validating, manipulating, and formatting dates. Affected versions of moment were found to use an inefficient parsing algorithm. Specifically using string-to-date parsing in moment (more specifically rfc2822 parsing, which is tried by default) has quadratic (N^2) complexity on specific inputs. Users may notice a noticeable slowdown is observed with inputs above 10k characters. Users who pass user-provided strings without sanity length checks to moment constructor are vulnerable to (Re)DoS attacks. The problem is patched in 2.29.4, the patch can be applied to all affected versions with minimal tweaking. Users are advised to upgrade. Users unable to upgrade should consider limiting date lengths accepted from user input.",
                "markdown": "**Vulnerability CVE-2022-31129**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|moment|2.29.4|[CVE-2022-31129](https://avd.aquasec.com/nvd/cve-2022-31129)|\n\nmoment is a JavaScript date library for parsing, validating, manipulating, and formatting dates. Affected versions of moment were found to use an inefficient parsing algorithm. Specifically using string-to-date parsing in moment (more specifically rfc2822 parsing, which is tried by default) has quadratic (N^2) complexity on specific inputs. Users may notice a noticeable slowdown is observed with inputs above 10k characters. Users who pass user-provided strings without sanity length checks to moment constructor are vulnerable to (Re)DoS attacks. The problem is patched in 2.29.4, the patch can be applied to all affected versions with minimal tweaking. Users are advised to upgrade. Users unable to upgrade should consider limiting date lengths accepted from user input."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-25858",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-25858"
              },
              "fullDescription": {
                "text": "The package terser before 4.8.1, from 5.0.0 and before 5.14.2 are vulnerable to Regular Expression Denial of Service (ReDoS) due to insecure usage of regular expressions."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2022-25858",
              "help": {
                "text": "Vulnerability CVE-2022-25858\nSeverity: MEDIUM\nPackage: terser\nFixed Version: 5.14.2, 4.8.1\nLink: [CVE-2022-25858](https://avd.aquasec.com/nvd/cve-2022-25858)\nThe package terser before 4.8.1, from 5.0.0 and before 5.14.2 are vulnerable to Regular Expression Denial of Service (ReDoS) due to insecure usage of regular expressions.",
                "markdown": "**Vulnerability CVE-2022-25858**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|terser|5.14.2, 4.8.1|[CVE-2022-25858](https://avd.aquasec.com/nvd/cve-2022-25858)|\n\nThe package terser before 4.8.1, from 5.0.0 and before 5.14.2 are vulnerable to Regular Expression Denial of Service (ReDoS) due to insecure usage of regular expressions."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2021-23772",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-23772"
              },
              "fullDescription": {
                "text": "This affects all versions of package github.com/kataras/iris; all versions of package github.com/kataras/iris/v12. The unsafe handling of file names during upload using UploadFormFiles method may enable attackers to write to arbitrary locations outside the designated target folder."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2021-23772",
              "help": {
                "text": "Vulnerability CVE-2021-23772\nSeverity: HIGH\nPackage: github.com/kataras/iris/v12\nFixed Version: 12.2.0-alpha8\nLink: [CVE-2021-23772](https://avd.aquasec.com/nvd/cve-2021-23772)\nThis affects all versions of package github.com/kataras/iris; all versions of package github.com/kataras/iris/v12. The unsafe handling of file names during upload using UploadFormFiles method may enable attackers to write to arbitrary locations outside the designated target folder.",
                "markdown": "**Vulnerability CVE-2021-23772**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|github.com/kataras/iris/v12|12.2.0-alpha8|[CVE-2021-23772](https://avd.aquasec.com/nvd/cve-2021-23772)|\n\nThis affects all versions of package github.com/kataras/iris; all versions of package github.com/kataras/iris/v12. The unsafe handling of file names during upload using UploadFormFiles method may enable attackers to write to arbitrary locations outside the designated target folder."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "8.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2021-42576",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-42576"
              },
              "fullDescription": {
                "text": "The bluemonday sanitizer before 1.0.16 for Go, and before 0.0.8 for Python (in pybluemonday), does not properly enforce policies associated with the SELECT, STYLE, and OPTION elements."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2021-42576",
              "help": {
                "text": "Vulnerability CVE-2021-42576\nSeverity: CRITICAL\nPackage: github.com/microcosm-cc/bluemonday\nFixed Version: 1.0.16\nLink: [CVE-2021-42576](https://avd.aquasec.com/nvd/cve-2021-42576)\nThe bluemonday sanitizer before 1.0.16 for Go, and before 0.0.8 for Python (in pybluemonday), does not properly enforce policies associated with the SELECT, STYLE, and OPTION elements.",
                "markdown": "**Vulnerability CVE-2021-42576**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|CRITICAL|github.com/microcosm-cc/bluemonday|1.0.16|[CVE-2021-42576](https://avd.aquasec.com/nvd/cve-2021-42576)|\n\nThe bluemonday sanitizer before 1.0.16 for Go, and before 0.0.8 for Python (in pybluemonday), does not properly enforce policies associated with the SELECT, STYLE, and OPTION elements."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "9.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "CRITICAL"
                ]
              }
            },
            {
              "id": "CVE-2021-29272",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-29272"
              },
              "fullDescription": {
                "text": "bluemonday before 1.0.5 allows XSS because certain Go lowercasing converts an uppercase Cyrillic character, defeating a protection mechanism against the \u0026#34;script\u0026#34; string."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2021-29272",
              "help": {
                "text": "Vulnerability CVE-2021-29272\nSeverity: MEDIUM\nPackage: github.com/microcosm-cc/bluemonday\nFixed Version: 1.0.5\nLink: [CVE-2021-29272](https://avd.aquasec.com/nvd/cve-2021-29272)\nbluemonday before 1.0.5 allows XSS because certain Go lowercasing converts an uppercase Cyrillic character, defeating a protection mechanism against the \"script\" string.",
                "markdown": "**Vulnerability CVE-2021-29272**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|github.com/microcosm-cc/bluemonday|1.0.5|[CVE-2021-29272](https://avd.aquasec.com/nvd/cve-2021-29272)|\n\nbluemonday before 1.0.5 allows XSS because certain Go lowercasing converts an uppercase Cyrillic character, defeating a protection mechanism against the \"script\" string."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "6.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2020-26892",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-26892"
              },
              "fullDescription": {
                "text": "The JWT library in NATS nats-server before 2.1.9 has Incorrect Access Control because of how expired credentials are handled."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2020-26892",
              "help": {
                "text": "Vulnerability CVE-2020-26892\nSeverity: CRITICAL\nPackage: github.com/nats-io/jwt\nFixed Version: 1.1.0\nLink: [CVE-2020-26892](https://avd.aquasec.com/nvd/cve-2020-26892)\nThe JWT library in NATS nats-server before 2.1.9 has Incorrect Access Control because of how expired credentials are handled.",
                "markdown": "**Vulnerability CVE-2020-26892**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|CRITICAL|github.com/nats-io/jwt|1.1.0|[CVE-2020-26892](https://avd.aquasec.com/nvd/cve-2020-26892)|\n\nThe JWT library in NATS nats-server before 2.1.9 has Incorrect Access Control because of how expired credentials are handled."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "9.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "CRITICAL"
                ]
              }
            },
            {
              "id": "CVE-2020-26521",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-26521"
              },
              "fullDescription": {
                "text": "The JWT library in NATS nats-server before 2.1.9 allows a denial of service (a nil dereference in Go code)."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2020-26521",
              "help": {
                "text": "Vulnerability CVE-2020-26521\nSeverity: HIGH\nPackage: github.com/nats-io/jwt\nFixed Version: 1.1.0\nLink: [CVE-2020-26521](https://avd.aquasec.com/nvd/cve-2020-26521)\nThe JWT library in NATS nats-server before 2.1.9 allows a denial of service (a nil dereference in Go code).",
                "markdown": "**Vulnerability CVE-2020-26521**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|github.com/nats-io/jwt|1.1.0|[CVE-2020-26521](https://avd.aquasec.com/nvd/cve-2020-26521)|\n\nThe JWT library in NATS nats-server before 2.1.9 allows a denial of service (a nil dereference in Go code)."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2021-3127",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-3127"
              },
              "fullDescription": {
                "text": "NATS Server 2.x before 2.2.0 and JWT library before 2.0.1 have Incorrect Access Control because Import Token bindings are mishandled."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2021-3127",
              "help": {
                "text": "Vulnerability CVE-2021-3127\nSeverity: HIGH\nPackage: github.com/nats-io/jwt\nFixed Version: 1.2.3-0.20210314221642-a826c77dc9d2\nLink: [CVE-2021-3127](https://avd.aquasec.com/nvd/cve-2021-3127)\nNATS Server 2.x before 2.2.0 and JWT library before 2.0.1 have Incorrect Access Control because Import Token bindings are mishandled.",
                "markdown": "**Vulnerability CVE-2021-3127**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|github.com/nats-io/jwt|1.2.3-0.20210314221642-a826c77dc9d2|[CVE-2021-3127](https://avd.aquasec.com/nvd/cve-2021-3127)|\n\nNATS Server 2.x before 2.2.0 and JWT library before 2.0.1 have Incorrect Access Control because Import Token bindings are mishandled."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "GHSA-62mh-w5cv-p88c",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "GHSA-62mh-w5cv-p88c"
              },
              "fullDescription": {
                "text": "The NATS server provides for Subjects which are namespaced by Account; all Subjects are supposed to be private to an account, with an `Export/Import` system used to grant cross-account access to some Subjects. Some Exports are public, such that anyone can import the relevant subjects, and some Exports are private, such that the Import requires a token JWT to prove permission. The JWT library\u0026#39;s validation of the bindings in the `Import Token` incorrectly warned on mismatches, instead of outright rejecting the token. As a result, any account can take an Import token used by any other account and re-use it for themselves because the binding to the importing account is not rejected, and use it to import any Subject from the Exporting account, not just the Subject referenced in the Import Token. The NATS account-server system treats account JWTs as semi-public information, such that an attacker can easily enumerate all account JWTs and retrieve all Import Tokens from those account JWTs."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://github.com/advisories/GHSA-62mh-w5cv-p88c",
              "help": {
                "text": "Vulnerability GHSA-62mh-w5cv-p88c\nSeverity: UNKNOWN\nPackage: github.com/nats-io/jwt\nFixed Version: v2.0.1\nLink: [GHSA-62mh-w5cv-p88c](https://github.com/advisories/GHSA-62mh-w5cv-p88c)\nThe NATS server provides for Subjects which are namespaced by Account; all Subjects are supposed to be private to an account, with an `Export/Import` system used to grant cross-account access to some Subjects. Some Exports are public, such that anyone can import the relevant subjects, and some Exports are private, such that the Import requires a token JWT to prove permission. The JWT library's validation of the bindings in the `Import Token` incorrectly warned on mismatches, instead of outright rejecting the token. As a result, any account can take an Import token used by any other account and re-use it for themselves because the binding to the importing account is not rejected, and use it to import any Subject from the Exporting account, not just the Subject referenced in the Import Token. The NATS account-server system treats account JWTs as semi-public information, such that an attacker can easily enumerate all account JWTs and retrieve all Import Tokens from those account JWTs.",
                "markdown": "**Vulnerability GHSA-62mh-w5cv-p88c**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|UNKNOWN|github.com/nats-io/jwt|v2.0.1|[GHSA-62mh-w5cv-p88c](https://github.com/advisories/GHSA-62mh-w5cv-p88c)|\n\nThe NATS server provides for Subjects which are namespaced by Account; all Subjects are supposed to be private to an account, with an `Export/Import` system used to grant cross-account access to some Subjects. Some Exports are public, such that anyone can import the relevant subjects, and some Exports are private, such that the Import requires a token JWT to prove permission. The JWT library's validation of the bindings in the `Import Token` incorrectly warned on mismatches, instead of outright rejecting the token. As a result, any account can take an Import token used by any other account and re-use it for themselves because the binding to the importing account is not rejected, and use it to import any Subject from the Exporting account, not just the Subject referenced in the Import Token. The NATS account-server system treats account JWTs as semi-public information, such that an attacker can easily enumerate all account JWTs and retrieve all Import Tokens from those account JWTs."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0",
                "tags": [
                  "vulnerability",
                  "security",
                  "UNKNOWN"
                ]
              }
            },
            {
              "id": "CVE-2022-21698",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-21698"
              },
              "fullDescription": {
                "text": "client_golang is the instrumentation library for Go applications in Prometheus, and the promhttp package in client_golang provides tooling around HTTP servers and clients. In client_golang prior to version 1.11.1, HTTP server is susceptible to a Denial of Service through unbounded cardinality, and potential memory exhaustion, when handling requests with non-standard HTTP methods. In order to be affected, an instrumented software must use any of `promhttp.InstrumentHandler*` middleware except `RequestsInFlight`; not filter any specific methods (e.g GET) before middleware; pass metric with `method` label name to our middleware; and not have any firewall/LB/proxy that filters away requests with unknown `method`. client_golang version 1.11.1 contains a patch for this issue. Several workarounds are available, including removing the `method` label name from counter/gauge used in the InstrumentHandler; turning off affected promhttp handlers; adding custom middleware before promhttp handler that will sanitize the request method given by Go http.Request; and using a reverse proxy or web application firewall, configured to only allow a limited set of methods."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2022-21698",
              "help": {
                "text": "Vulnerability CVE-2022-21698\nSeverity: HIGH\nPackage: github.com/prometheus/client_golang\nFixed Version: 1.11.1\nLink: [CVE-2022-21698](https://avd.aquasec.com/nvd/cve-2022-21698)\nclient_golang is the instrumentation library for Go applications in Prometheus, and the promhttp package in client_golang provides tooling around HTTP servers and clients. In client_golang prior to version 1.11.1, HTTP server is susceptible to a Denial of Service through unbounded cardinality, and potential memory exhaustion, when handling requests with non-standard HTTP methods. In order to be affected, an instrumented software must use any of `promhttp.InstrumentHandler*` middleware except `RequestsInFlight`; not filter any specific methods (e.g GET) before middleware; pass metric with `method` label name to our middleware; and not have any firewall/LB/proxy that filters away requests with unknown `method`. client_golang version 1.11.1 contains a patch for this issue. Several workarounds are available, including removing the `method` label name from counter/gauge used in the InstrumentHandler; turning off affected promhttp handlers; adding custom middleware before promhttp handler that will sanitize the request method given by Go http.Request; and using a reverse proxy or web application firewall, configured to only allow a limited set of methods.",
                "markdown": "**Vulnerability CVE-2022-21698**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|github.com/prometheus/client_golang|1.11.1|[CVE-2022-21698](https://avd.aquasec.com/nvd/cve-2022-21698)|\n\nclient_golang is the instrumentation library for Go applications in Prometheus, and the promhttp package in client_golang provides tooling around HTTP servers and clients. In client_golang prior to version 1.11.1, HTTP server is susceptible to a Denial of Service through unbounded cardinality, and potential memory exhaustion, when handling requests with non-standard HTTP methods. In order to be affected, an instrumented software must use any of `promhttp.InstrumentHandler*` middleware except `RequestsInFlight`; not filter any specific methods (e.g GET) before middleware; pass metric with `method` label name to our middleware; and not have any firewall/LB/proxy that filters away requests with unknown `method`. client_golang version 1.11.1 contains a patch for this issue. Several workarounds are available, including removing the `method` label name from counter/gauge used in the InstrumentHandler; turning off affected promhttp handlers; adding custom middleware before promhttp handler that will sanitize the request method given by Go http.Request; and using a reverse proxy or web application firewall, configured to only allow a limited set of methods."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-21221",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-21221"
              },
              "fullDescription": {
                "text": "The package github.com/valyala/fasthttp before 1.34.0 are vulnerable to Directory Traversal via the ServeFile function, due to improper sanitization. It is possible to be exploited by using a backslash %5c character in the path. **Note:** This security issue impacts Windows users only."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2022-21221",
              "help": {
                "text": "Vulnerability CVE-2022-21221\nSeverity: HIGH\nPackage: github.com/valyala/fasthttp\nFixed Version: v1.34.0\nLink: [CVE-2022-21221](https://avd.aquasec.com/nvd/cve-2022-21221)\nThe package github.com/valyala/fasthttp before 1.34.0 are vulnerable to Directory Traversal via the ServeFile function, due to improper sanitization. It is possible to be exploited by using a backslash %5c character in the path. **Note:** This security issue impacts Windows users only.",
                "markdown": "**Vulnerability CVE-2022-21221**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|github.com/valyala/fasthttp|v1.34.0|[CVE-2022-21221](https://avd.aquasec.com/nvd/cve-2022-21221)|\n\nThe package github.com/valyala/fasthttp before 1.34.0 are vulnerable to Directory Traversal via the ServeFile function, due to improper sanitization. It is possible to be exploited by using a backslash %5c character in the path. **Note:** This security issue impacts Windows users only."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            }
          ],
          "version": "0.29.2"
        }
      },
      "results": [
        {
          "ruleId": "CVE-2022-24434",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Package: dicer\nInstalled Version: 0.3.0\nVulnerability CVE-2022-24434\nSeverity: HIGH\nFixed Version: \nLink: [CVE-2022-24434](https://avd.aquasec.com/nvd/cve-2022-24434)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "imls-directus/package-lock.json",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-31129",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "Package: moment\nInstalled Version: 2.29.2\nVulnerability CVE-2022-31129\nSeverity: HIGH\nFixed Version: 2.29.4\nLink: [CVE-2022-31129](https://avd.aquasec.com/nvd/cve-2022-31129)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "imls-directus/package-lock.json",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-25858",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "Package: terser\nInstalled Version: 5.12.1\nVulnerability CVE-2022-25858\nSeverity: MEDIUM\nFixed Version: 5.14.2, 4.8.1\nLink: [CVE-2022-25858](https://avd.aquasec.com/nvd/cve-2022-25858)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "imls-directus/package-lock.json",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-23772",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "Package: github.com/kataras/iris/v12\nInstalled Version: 12.1.8\nVulnerability CVE-2021-23772\nSeverity: HIGH\nFixed Version: 12.2.0-alpha8\nLink: [CVE-2021-23772](https://avd.aquasec.com/nvd/cve-2021-23772)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "imls-raspberry-pi/go.mod",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42576",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "text": "Package: github.com/microcosm-cc/bluemonday\nInstalled Version: 1.0.2\nVulnerability CVE-2021-42576\nSeverity: CRITICAL\nFixed Version: 1.0.16\nLink: [CVE-2021-42576](https://avd.aquasec.com/nvd/cve-2021-42576)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "imls-raspberry-pi/go.mod",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-29272",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "Package: github.com/microcosm-cc/bluemonday\nInstalled Version: 1.0.2\nVulnerability CVE-2021-29272\nSeverity: MEDIUM\nFixed Version: 1.0.5\nLink: [CVE-2021-29272](https://avd.aquasec.com/nvd/cve-2021-29272)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "imls-raspberry-pi/go.mod",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-26892",
          "ruleIndex": 6,
          "level": "error",
          "message": {
            "text": "Package: github.com/nats-io/jwt\nInstalled Version: 0.3.0\nVulnerability CVE-2020-26892\nSeverity: CRITICAL\nFixed Version: 1.1.0\nLink: [CVE-2020-26892](https://avd.aquasec.com/nvd/cve-2020-26892)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "imls-raspberry-pi/go.mod",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-26521",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "Package: github.com/nats-io/jwt\nInstalled Version: 0.3.0\nVulnerability CVE-2020-26521\nSeverity: HIGH\nFixed Version: 1.1.0\nLink: [CVE-2020-26521](https://avd.aquasec.com/nvd/cve-2020-26521)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "imls-raspberry-pi/go.mod",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3127",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "Package: github.com/nats-io/jwt\nInstalled Version: 0.3.0\nVulnerability CVE-2021-3127\nSeverity: HIGH\nFixed Version: 1.2.3-0.20210314221642-a826c77dc9d2\nLink: [CVE-2021-3127](https://avd.aquasec.com/nvd/cve-2021-3127)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "imls-raspberry-pi/go.mod",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "GHSA-62mh-w5cv-p88c",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Package: github.com/nats-io/jwt\nInstalled Version: 0.3.0\nVulnerability GHSA-62mh-w5cv-p88c\nSeverity: UNKNOWN\nFixed Version: v2.0.1\nLink: [GHSA-62mh-w5cv-p88c](https://github.com/advisories/GHSA-62mh-w5cv-p88c)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "imls-raspberry-pi/go.mod",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-21698",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "Package: github.com/prometheus/client_golang\nInstalled Version: 1.4.0\nVulnerability CVE-2022-21698\nSeverity: HIGH\nFixed Version: 1.11.1\nLink: [CVE-2022-21698](https://avd.aquasec.com/nvd/cve-2022-21698)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "imls-raspberry-pi/go.mod",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-21221",
          "ruleIndex": 11,
          "level": "error",
          "message": {
            "text": "Package: github.com/valyala/fasthttp\nInstalled Version: 1.6.0\nVulnerability CVE-2022-21221\nSeverity: HIGH\nFixed Version: v1.34.0\nLink: [CVE-2022-21221](https://avd.aquasec.com/nvd/cve-2022-21221)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "imls-raspberry-pi/go.mod",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              }
            }
          ]
        }
      ],
      "columnKind": "utf16CodeUnits",
      "originalUriBaseIds": {
        "ROOTPATH": {
          "uri": "file:///"
        }
      }
    }
  ]
}