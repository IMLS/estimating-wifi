- name: install find-ralink tool binary
  ansible.builtin.get_url:
    url: "{{ findralink.binary_url }}"
    dest: "{{ findralink.install_path }}"
    owner: root
    group: root
    mode: 0755
  become: yes

# find-ralink options for -descriptor
# exists bool
# physicalId    int
# description   string
# busInfo       string
# logicalName   string
# serial        string
# mac           string
# configuration string

# We must "become" for the find-ralink tool.
# It will not find USB devices as non-root.
# Normally, if no device is found, there is a non-zero error.
# However, if we're asking nicely to find out if one exists,
# we will get "true" or "false", and a 0 error code always.
# (Short of catestrophic errors/failures.)
- name: do we find an ralink adapter?
  ansible.builtin.command:
    cmd: "{{ findralink.bin }} --exists"
  register: ralink_exists
  become: yes

- name: get the mac address if it exists
  ansible.builtin.command:
    cmd: "{{ findralink.bin }} --descriptor mac"
  register: ralink_mac
  become: yes
  when: "'true' in ralink_exists.stdout"

# If we find an adapter, then we can proceed to update 
# some global config files. 
- name: write wlan1 into udev rules
  ansible.builtin.lineinfile:
    path: /etc/udev/rules.d/75-persistent-wifi-mapping.rules
    state: present
    line: 'SUBSYSTEM=="net", ACTION=="add", ATTR{address}=="{{ ralink_mac.stdout }}", NAME="wlan1"'
    create: true
  become: yes
  when: "'true' in ralink_exists.stdout"

- name: do we find the default broadcom adapter?
  ansible.builtin.command:
    cmd: "{{ findralink.bin }} --exists --search brc"
  register: brc_exists
  become: yes

- name: get the mac address of the broadcom adapter if it exists
  ansible.builtin.command:
    cmd: "{{ findralink.bin }} --search brc --descriptor mac"
  register: brc_mac
  become: yes
  when: "'true' in brc_exists.stdout"

- name: write wlan0 into udev rules
  ansible.builtin.lineinfile:
    path: /etc/udev/rules.d/75-persistent-wifi-mapping.rules
    state: present
    line: 'SUBSYSTEM=="net", ACTION=="add", ATTR{address}=="{{ brc_mac.stdout }}", NAME="wlan0"'
  become: yes
  when: "'true' in brc_exists.stdout"
